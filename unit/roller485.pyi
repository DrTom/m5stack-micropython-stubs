from .pahub import PAHUBUnit as PAHUBUnit
from .unit_helper import UnitError as UnitError
from _typeshed import Incomplete
from machine import I2C as I2C, UART as UART
from typing import Literal

class RollerBase:
    def __init__(self) -> None: ...
    def read(self, register, length) -> bytes: ...
    def write(self, register, data: bytes) -> None: ...
    def readfrom_mem(self, addr: int, mem_addr: int, nbytes: int) -> bytes: ...
    def readfrom_mem_into(self, addr: int, mem_addr: int, buf: bytearray) -> None: ...
    def writeto_mem(self, addr: int, mem_addr: int, buf: list) -> Literal[True]: ...
    def readfrom(self, addr: int, nbytes: int): ...
    def readfrom_into(self, addr: int, buf: bytearray) -> None: ...
    def writeto(self, addr: int, buf: bytes | bytearray, stop: bool = True): ...
    def scan(self) -> list: ...
    def deinit(self) -> None: ...
    def set_motor_output_state(self, ctrl: int = 0) -> None: ...
    def get_motor_output_state(self) -> bool: ...
    def set_motor_mode(self, mode: int) -> None: ...
    def get_motor_mode(self) -> int: ...
    def set_motor_over_range_protect_state(self, state: int = 1) -> None: ...
    def get_motor_over_range_protect_state(self) -> bool: ...
    def remove_motor_jam_protect(self) -> None: ...
    def get_motor_status(self) -> int: ...
    def get_motor_error_code(self) -> int: ...
    def set_button_change_mode(self, state: int = 1) -> None: ...
    def get_button_change_mode(self) -> int: ...
    def set_motor_jam_protect_state(self, state: int = 1) -> None: ...
    def get_motor_jam_protect_state(self) -> bool: ...
    def set_motor_id(self, id: int = 0) -> None: ...
    def get_motor_id(self) -> int: ...
    def set_485_baudrate(self, bps: int = 0) -> None: ...
    def get_485_baudrate(self) -> int: ...
    def set_rgb_brightness(self, bright: int = 0) -> None: ...
    def get_rgb_brightness(self) -> int: ...
    def set_motor_speed(self, speed: int) -> None: ...
    def get_motor_speed(self) -> int: ...
    def set_speed_max_current(self, current: int) -> None: ...
    def get_speed_max_current(self) -> int: ...
    def get_motor_speed_readback(self) -> float: ...
    def set_motor_speed_pid(self, p: float, i: float, d: float) -> None: ...
    def get_motor_speed_pid(self) -> tuple: ...
    def set_motor_position(self, position: int) -> None: ...
    def get_motor_position(self) -> int: ...
    def set_position_max_current(self, current: int) -> None: ...
    def get_position_max_current(self) -> int: ...
    def get_motor_position_readback(self) -> float: ...
    def get_motor_position_pid(self) -> tuple: ...
    def set_motor_position_pid(self, p: float, i: float, d: float) -> None: ...
    def set_motor_max_current(self, current: int) -> None: ...
    def get_motor_max_current(self) -> int: ...
    def get_motor_current_readback(self) -> float: ...
    def set_rgb_color(self, rgb: int = 0) -> None: ...
    def get_rgb_color(self) -> tuple: ...
    def set_rgb_mode(self, mode: int) -> None: ...
    def get_rgb_mode(self) -> int: ...
    def get_vin_voltage(self) -> int: ...
    def get_temperature_value(self) -> int: ...
    def set_encoder_value(self, count: int) -> None: ...
    def get_encoder_value(self) -> int: ...
    def save_param_to_flash(self) -> None: ...
    def get_firmware_version(self) -> int: ...
    def set_i2c_address(self, addr: int) -> None: ...
    def get_i2c_address(self) -> int: ...

class RollerI2C(RollerBase):
    def __init__(self, i2c: I2C | PAHUBUnit, address: int = ..., mode: Incomplete | None = None) -> None: ...
    def read(self, register, length) -> bytes: ...
    def write(self, register, bytes) -> None: ...

class Roller485(RollerBase):
    setting_buf: Incomplete
    rgb_buf: Incomplete
    def __init__(self, bus, address=..., mode: Incomplete | None = None) -> None: ...
    def read(self, register, length): ...
    def create_frame(self, cmd, motor_id, *datas) -> None: ...
    def write(self, register, bytes) -> bool: ...
    def send_command(self, cmd, id, data, buf_len: int = 15) -> None: ...
    def read_response(self, cmd, id): ...

class Roller485ToI2CBus(Roller485):
    def __init__(self, bus, address=..., mode: Incomplete | None = None) -> None: ...
    def readfrom_mem(self, addr: int, mem_addr: int, nbytes: int) -> bytes: ...
    def readfrom_mem_into(self, addr: int, mem_addr: int, buf: bytearray) -> None: ...
    def writeto_mem(self, addr: int, mem_addr: int, buf) -> Literal[True]: ...
    def readfrom(self, addr: int, nbytes: int) -> bytes: ...
    def readfrom_into(self, addr: int, buf: bytearray) -> None: ...
    def writeto(self, addr: int, buf: bytes | bytearray, stop: bool = True) -> Literal[True]: ...
    def scan(self) -> list: ...

class Roller485Unit:
    I2C_MODE: int
    RS485_MODE: int
    RS485_TO_I2C_MODE: int
    def __new__(cls, *args, **kwargs) -> RollerBase: ...
