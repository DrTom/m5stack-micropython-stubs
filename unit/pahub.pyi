from _typeshed import Incomplete
from machine import I2C as I2C
from typing import Sequence
from typing_extensions import Literal
from uio import AnyReadableBuf as AnyReadableBuf, AnyWritableBuf as AnyWritableBuf

PAHUB_CHN0: Incomplete
PAHUB_CHN1: Incomplete
PAHUB_CHN2: Incomplete
PAHUB_CHN3: Incomplete
PAHUB_CHN4: Incomplete
PAHUB_CHN5: Incomplete
PAHUB_DEFAULT_ADDR: Incomplete

class PAHUBUnit:
    def __init__(self, i2c: I2C, address=..., channel: Literal[0, 1, 2, 3, 4, 5] = 0) -> None: ...
    def select_channel(self, channel: int) -> None: ...
    def release_channel(self, channel: int) -> None: ...
    def deinit(self) -> None: ...
    def scan(self) -> list[int]: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def readinto(self, buf: AnyWritableBuf, nack: bool = True) -> None: ...
    def write(self, buf: AnyReadableBuf) -> int: ...
    def readfrom(self, addr: int, nbytes: int, stop: bool = True) -> bytes: ...
    def readfrom_into(self, addr: int, buf: AnyWritableBuf, stop: bool = True) -> None: ...
    def writeto(self, addr: int, buf: AnyReadableBuf, stop: bool = True) -> int: ...
    def writevto(self, addr: int, vector: Sequence[AnyReadableBuf], stop: bool = True) -> int: ...
    def readfrom_mem(self, addr: int, memaddr: int, nbytes: int) -> bytes: ...
    def readfrom_mem_into(self, addr: int, memaddr: int, buf: AnyWritableBuf) -> None: ...
    def writeto_mem(self, addr: int, memaddr: int, buf: AnyReadableBuf) -> None: ...
